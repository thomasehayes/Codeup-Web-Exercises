undefined offsets really means undefined indexes. // for arrays

Arguments count $argc
Arguments values $argv

var_dump($argc, $argv);

if this is ran in file name arguments.php

php arguments.php // in virtual box
int(1) //Only one argument was counted which is arguments.php
array(1) {
	[0] =>
	string(13) "arguments.php"
}

if you add more to the arguments.php like 
php arguments.php thomas hayes
the outcome is
int(3) because argument.php is 1, thomas is 2 and hayes is 3



ryan's example in the high low game
<?php 

// input
	// "wishful thinking" path
	// php highlow.php 1 100

//check for the appropriate amount of arguments
if ($argc == 3) {
	
	//make sure the arguments are numbers
	
	if (is_numeric($argv[1]) && is_numeric($argv[2])) {

		$min = $argv[1];
		$max = $argv[2];
	} else {
		// prompt the user for a numeric minimum until they provide a numeric minimum
		do {
			fwrite(STDOUT, "Please input a min number. Input must be numeric" . PHP_EOL);
			$min = trim(fgets(STDIN));
		} while (!is_numeric($min));

		//prompt the user for a numeric maximum until they provide a numeric minimum
		do {
			fwrite(STDOUT, "Please input a max number. Input must be numeric" . PHP_EOL);
			$max = trim(fgets(STDIN));
		} while (!is_numeric($max));
	}

} else {
	$min = 1;
	$max = 100;
}

//if min > max, swap them

if($min > $max){
	$min = $argv[2];
	$max = $argv[1];
}
$random = mt_ran($min, $max);

// prompt the user for a guess

// get the user's guess and store it as a variable
do {
	
	//refactor this to a function called getNumber()
	do {
		fwrite(STDOUT, "Guess a number between $min and $max" . PHP_EOL);
		$guess = trim(fgets(STDIN));
	} while (!is_numeric($guess));

	if($guess < $random) {
		fwrite(STDOUT, "HIGHER" . PHP_EOL);
	} else if ($guess> $random) {
		fwrite(STDOUT, "LOWER" .PHP_EOL;)
	} 
} while ($guess != $random);
fwrite(STDOUT, "Correct");








